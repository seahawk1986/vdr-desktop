#!/usr/bin/python2
# vim: set fileencoding=utf-8 :
# Alexander Grothe 2012

import codecs
import datetime
import dbus
import dbus.service
import fcntl
import gobject
import gtk
import neo_cgi
import neo_util
import os
import re
import socket
import string
import subprocess
import sys
import syslog
import time
import wnck

from optparse import OptionParser

from dbus.mainloop.glib import DBusGMainLoop

DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()
sbus = dbus.SessionBus()


# traxanos HDF-Class (https://github.com/yavdr/yavdr-utils/blob/experimental/scripts/yavdr-db-tool)
class HDF:
    def __init__(self, file):
        self.file = file
        self.hdf = neo_util.HDF()
        self.readFile()
    def readKey(self, key, default = ""):
        return self.hdf.getValue(key, default)
    def writeKey(self, key, value):
        return self.hdf.setValue(key, value)
    def deleteKey(self, key):
        return self.hdf.removeTree(key)
    def dumpKey(self, key):
        dump = []
        for entry in self.hdf.dump().split("\n"):
            regex = re.compile('^%s'%key)
            if entry != "" and (key == '.' or re.search(regex, entry)):
                dump.append(entry)
        return "\n".join(dump)
    def childrensByKey(self, key):
        childrens = []
        dataset = self.hdf.getObj(key)
        try:
            child = dataset.child()
            while child:
                childrens.append(child.name())
                child = child.next()
        except:
            pass
        return childrens
    def checkKey(self, key):
        if self.readKey(key, "NULLNULLNULL") == "NULLNULLNULL":
            if len(self.childrensByKey(key)) > 0:
                return True
            else:
                return False
        else:
            return True
    def presetKey(self, key, value):
        if not self.checkKey(key):
            self.writeKey(key, value)
    def readFile(self):
        if os.path.exists(self.file) and os.path.isfile(self.file):
            return self.hdf.readFile(self.file);
    def writeFile(self):
        return self.hdf.writeFile(self.file);
    def __str__( self ):
        return self.hdf.dump()

class Options:
    def __init__(self):
        self.parser = OptionParser()
        self.parser.add_option("-c", "--hdf", dest="hdf_file", default=None,
            help=u"choose clearsilver hdf file", metavar="HDF_FILE")

    def get_opts(self):
        (options, args) = self.parser.parse_args()
        return options

class adeskbarDBus():
    '''wrapper for adeskbar'''
    def __init__(self):
        self.adeskbar = sbus.get_object("com.adcomp.adeskbar","/Control")
        self.interface = 'com.adcomp.adeskbar'

    def hide(self):
        answer = self.adeskbar.hide(dbus_interface=self.interface)
        return False

class vdrPIP():
    def __init__(self,wnckctrl):
        self.cmd = ['/usr/bin/vdr \
        -i 1 \
        -m \
        -c /var/lib/vdr-pip \
        -L /usr/lib/vdr/plugins \
        -l 3 \
        -p 2101 \
        -E- \
        -P "softhddevice -D -g 720x405+0+0" \
        -Pdbus2vdr \
        -Pstreamdev-client \
        -v /srv/share/vdr \
        --no-kbd']
        #print hdf.readKey('vdr.pip.cmd',None)
        self.screenX = wnckctrl.screen_height
        self.screenY = wnckctrl.screen_width
        self.pipX = 720 * self.screenX / 1920
        self.pipY = self.pipX * self.screenY/self.screenX
        self.marginX = 10
        self.marginY = 10
        self.proc = None
        self.shddbus = None
        self.interface = 'de.tvdr.vdr.plugin'


    def run_vdr(self):
        self.proc = subprocess.Popen(self.cmd, shell=True) # Spawn process
        gobject.child_watch_add(self.proc.pid,self.on_exit,self.proc) # Add callback on exit
        while not self.shddbus:
            try:
                self.shddbus = bus.get_object("de.tvdr.vdr1","/Plugins/softhddevice")
            except: time.sleep(0.5)


    def attach(self,X=0,Y=0,x=0,y=0):
        '''if X and Y:
            geometry="-g %sx%s+%s+%s"%(X,Y,x,y)
        else:
            geometry = ""'''
        #self.shddbus = bus.get_object("de.tvdr.vdr1","/Plugins/softhddevice")
        self.shddbus.SVDRPCommand(dbus.String("atta"),
                                    dbus.String('-a ""'),
                                    dbus_interface=self.interface)

    def detach(self):
        self.shddbus.SVDRPCommand(dbus.String("deta"),dbus.String(''),dbus_interface=self.interface)

    def stopvdr(self):
        self.proc.terminate()

    def on_exit(self,pid, condition,data):
        print "exit vdr-pip, called function with pid=%s, condition=%s, data=%s"%(pid, condition,data)
        a,b = data.communicate()
        print a,b
        self.proc = None


class dbusRemote():
    '''wrapper for remote interface provided by the dbus2vdr plugin'''
    def __init__(self):
        self.dbusremote = bus.get_object("de.tvdr.vdr","/Remote")
        self.interface = 'de.tvdr.vdr.remote'

    def sendkey(self,key):
        answer, message = self.dbusremote.HitKey(dbus.String(key),dbus_interface=self.interface)
        if answer == 250: return True
        else: return False

    def enable(self):
        answer, message = self.dbusremote.Enable(dbus_interface=self.interface)
        if answer == 250: return True
        else: return False

    def disable(self):
        answer, message = self.dbusremote.Disable(dbus_interface=self.interface)
        if answer == 250: return True
        else: return False

    def status(self):
        answer, message = self.dbusremote.Status(dbus_interface=self.interface)
        if answer == 250: return True
        else: return False

class dbusShutdown():
    '''wrapper for shutdown interface provided by the dbus2vdr plugin'''
    def __init__(self):
        self.dbusshutdown = bus.get_object("de.tvdr.vdr","/Shutdown")
        self.interface = 'de.tvdr.vdr.shutdown'

    def manualstart(self):
        return self.dbusshutdown.ManualStart(dbus_interface=self.interface)

    def confirmShutdown(self,user=False):
        code, message, shutdownhooks, message = self.dbusshutdown.ConfirmShutdown(dbus.Boolean(user),dbus_interface=self.interface)
        if code in [250,990]: return True
        else:
            syslog.syslog(u"vdr not ready for shutdown: %s: %s"%(code,message))
            return False

class dbusSetup():
    '''wrapper for setup interface provided by the dbus2vdr plugin'''
    def __init__(self):
        self.dbussetup = bus.get_object("de.tvdr.vdr","/Setup")
        self.interface = 'de.tvdr.vdr.setup'

    def vdrsetupget(self,option):
        return self.dbussetup.Get(dbus.String(option),dbus_interface=self.interface)

def get_dbusPlugins():
    '''wrapper for dbus plugin list'''
    dbusplugins = bus.get_object("de.tvdr.vdr","/Plugins")
    raw = dbusplugins.List(dbus_interface="de.tvdr.vdr.plugin")
    plugins = {}
    for name, version in raw:
        plugins[name]=version
    return plugins


class dbusSofthddeviceFrontend():
    '''handler for softhddevice's svdrp plugin command interface provided by the dbus2vdr plugin'''
    def __init__(self):
        self.dbusfe = bus.get_object("de.tvdr.vdr","/Plugins/softhddevice")
        self.interface = 'de.tvdr.vdr.plugin'

    def activateWindow(self,window):
        window.activate(int(time.strftime("%s",time.gmtime())))

    def status(self):
        code, mode = self.dbusfe.SVDRPCommand(dbus.String("STAT"),dbus.String(None),dbus_interface=self.interface)
        return mode.split()[-1]

    def attach(self):
        display = dbus.String("-d %s"%(settings.env["DISPLAY"]))
        reply, answer = self.dbusfe.SVDRPCommand(dbus.String("ATTA"),display,dbus_interface=self.interface)
        remote.enable()
        settings.frontend_active = 1

    def detach(self):
        reply, answer = self.dbusfe.SVDRPCommand(dbus.String("DETA"),dbus.String(None),dbus_interface=self.interface)
        remote.disable()
        settings.frontend_active = 0

    def resume(self,status):
        reply, answer = self.dbusfe.SVDRPCommand(dbus.String("RESU"),dbus.String(None),dbus_interface=self.interface)
        settings.frontend_active = 1


def setUserInactive(user=False):
    dbusshutdown = bus.get_object("de.tvdr.vdr","/Shutdown")
    dbusshutdown.SetUserInactive(dbus_interface='de.tvdr.vdr.shutdown')
    send_shutdown(user)
    settings.time = gobject.timeout_add(300000,send_shutdown)

def detach():
    # set background visible when frontend is detached
    subprocess.call(["/usr/bin/feh","--bg-fill",settings.conf['logo_detached']], env=settings.env)
    frontend.detach()
    graphtft_switch()
    return True

def send_shutdown(user=False):
    if shutdown.confirmShutdown(user):
        remote.enable()
        remote.sendkey("POWER")
        remote.disable()
    return True

def soft_detach():
    detach()
    settings.timer = gobject.timeout_add(300000,send_shutdown)
    return False

def graphtft_switch():
    if settings.graphtft:
        dbusgraph = bus.get_object("de.tvdr.vdr","/Plugins/graphtft")
        if settings.frontend_active == 0:
           dbusgraph.SVDRPCommand(dbus.String('TVIEW'),dbus.String(settings.conf['graphtft_view']),dbus_interface='de.tvdr.vdr.plugin')
        elif settings.frontend_active == 1:
           dbusgraph.SVDRPCommand(dbus.String('RVIEW'),dbus.String(None),dbus_interface='de.tvdr.vdr.plugin')

def resume(status):
    # set background visible when frontend is detached
    subprocess.call(["/usr/bin/feh","--bg-fill",settings.conf['logo_attached']], env=settings.env)

    if status == "SUSPENDED":
        frontend.resume()
    elif status == "SUSPEND_DETACHED":
        frontend.attach()
    graphtft_switch()


class Settings():
    ''' read and store configuration, handle input devices using udev'''
    def __init__(self):
        global gobject
        self.frontend_active = 0
        self.external_prog = 0
        self.env = os.environ
        self.timer = None
        # Get Values from HDF
        parser = Options()
        self.options = parser.get_opts()
        #self.hdf = HDF(self.options.hdf_file)
        self.manualstart = shutdown.manualstart()
        try:
            self.acpi_wakeup = self.check_acpi()
        except:
            self.acpi_wakeup = None
        # *** TODO: Replace by config loader ***
        self.conf = {
        'logo_attached':"/usr/share/yavdr/images/yavdr_logo.png",
        'logo_detached':"/usr/share/yavdr/images/yaVDR_background_detached.jpg",
        'key_detach':"KEY_PROG1",
        'key_xbmc':"KEY_PROG2",
        'key_power':"KEY_POWER2",
        'start_always_detached':'0',
        'graphtft_view':"NonLiveTv",
        'user':'vdr',
        'display':':0'
        }
        for i in self.conf:
            if i in os.environ:
                self.conf[i] = os.environ[i]


        # *** END TODO ***
        self.check_graphtft()
        self.updateDisplay()
        self.apps = {}

    def check_graphtft(self):
        plugins = get_dbusPlugins()
        if 'graphtft' in plugins: self.graphtft = True
        else: self.graphtft = False

    def check_pulseaudio(self):
        pulse = 1
        while pulse == 1:
          try:
            if "module-native-protocol-tcp" in subprocess.check_output(["/usr/bin/pactl","list","modules"]): pulse = 0
            time.sleep(1)
          except subprocess.CalledProcessError: pulse = 1

    def SetTimeout(self,timeout_s,call_f):
        timeout_ms = 1000 * timeout_s
        self.timer = gobject.timeout_add(timeout_ms,call_f)

    def CancelTimeout(self):
        try: gobject.source_remove(self.timer)
        except: pass

    def GetActiveWindowTitle(self):
        '''get title of active window'''
        return subprocess.Popen(["xprop", "-id", subprocess.Popen(["xprop", "-root", "_NET_ACTIVE_WINDOW"], stdout=subprocess.PIPE, env=settings.env).communicate()[0].strip().split()[-1], "WM_NAME"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].strip().split('"', 1)[-1][:-1]

    def updateDisplay(self):
        self.env["DISPLAY"] = self.conf['display'] #+self.getTempDisplay()

    def getTempDisplay(self):
        tempdisplay = ".0"
        return tempdisplay

    def check_acpi(self):
        timestr = open('/var/cache/vdr/acpiwakeup.time.old','r').read().splitlines()[0]
        wakeup = datetime.datetime.strptime(timestr, "%Y-%m-%d %H:%M:%S")
        now = datetime.datetime.utcnow()
        syslog.syslog("acip-wakeup.time.old hatte Wert: %s"%(wakeup.ctime()))
        syslog.syslog("vergleiche mit jetzt: %s"%(now.ctime()))
        if wakeup < now:
            d = now - wakeup
        else:
            d = wakeup - now
        if d.seconds > 360:
            syslog.syslog("assuming manual start")
            return False
        else:
            syslog.syslog("assuming start for acpi-wakeup")
            return True

    def tsplit(self,string, delimiters):
        """extends str.split - supports multiple delimiters."""
        delimiters = tuple(delimiters)
        stack = [string,]
        for delimiter in delimiters:
            for i, substring in enumerate(stack):
                substack = substring.split(delimiter)
                stack.pop(i)
                for j, _substring in enumerate(substack):
                    stack.insert(i+j, _substring)
        return stack

class dbusPIP(dbus.service.Object):
    def __init__(self,wnckctrl):
        bus_name = dbus.service.BusName('de.yavdr.frontend', bus=bus)#dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, '/pip')
        self.vdr = vdrPIP(wnckctrl)
        self.wnckctrl = wnckctrl

    def activateWindow(self,window):
        pass
        window.activate(int(time.strftime("%s",time.gmtime())))

    @dbus.service.method('de.yavdr.frontend',out_signature='s')
    def win(self):
        return ", ".join(self.wnckctrl.windows)
    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def start(self):
        if self.vdr.proc == None:
            self.vdr.run_vdr()
        self.vdr.attach()
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def stop(self):
        main_window = self.wnckctrl.windows['softhddevice_main']
        if main_window == None:
            frontend.attach()
            time.sleep(1)
        self.wnckctrl.maximize_and_undecorate(main_window)
        if self.vdr.proc != None:
            #self.vdr.proc.terminate()
            #self.vdr.proc = None
            self.vdr.detach()
            gobject.timeout_add(500,self.activateWindow,main_window)
            return True
        else:
            gobject.timeout_add(500,self.activateWindow,main_window)
            return False


    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def toggle(self):
        pip_window = self.wnckctrl.windows['softhddevice_pip']
        main_window = self.wnckctrl.windows['softhddevice_main']
        if pip_window == None:
            if self.vdr.proc == None:
                self.vdr.run_vdr()
            self.vdr.attach()
            gobject.timeout_add(500,self.activateWindow,main_window)
            return True
        else:
            self.vdr.detach()
            #self.vdr.proc.terminate()
            #self.vdr.proc = None
            main_window = self.wnckctrl.windows['softhddevice_main']
            if main_window != None:
                frontend.attach()
                time.sleep(1)
                self.wnckctrl.maximize_and_undecorate(main_window)
            gobject.timeout_add(500,self.activateWindow,main_window)
            return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def sbs(self):
        main_window = self.wnckctrl.windows['softhddevice_main']
        pip_window = self.wnckctrl.windows['softhddevice_pip']
        if main_window == None:
            frontend.attach()
            time.sleep(2)
        self.wnckctrl.resize(main_window,0,0,1600,900,0,0)
        if pip_window == None:
            if self.vdr.proc == None:
                self.vdr.run_vdr()
            self.vdr.attach()
            time.sleep(2)
        if pip_window != None:
            self.wnckctrl.resize(pip_window,1200,795,720,405,0,0)
            pip_window.make_above()
        if main_window != None:
            gobject.timeout_add(500,self.activateWindow,main_window)
        gobject.timeout_add(800,adeskbar.hide)
        return True


    @dbus.service.method('de.yavdr.frontend',in_signature='sii',out_signature='b')
    def resize(self,s,above,decoration):
        w,h,x,y = settings.tsplit(s,('x','+'))
        print(x,y,w,h)
        window = self.wnckctrl.windows['softhddevice_pip']
        if window:
            self.wnckctrl.resize(window,int(x),int(y),int(w),int(h),above,decoration)
            return True
        else:
            return False

class dbusService(dbus.service.Object):
    def __init__(self):
        bus_name = dbus.service.BusName('de.yavdr.frontend', bus=bus)#dbus.SessionBus())
        dbus.service.Object.__init__(self, bus_name, '/frontend')

    @dbus.service.method('de.yavdr.frontend',in_signature='i',out_signature='b')
    def deta(self,active=0):
        detach()
        if active == 1:
            settings.frontend_active = 1
            settings.external_prog = 1
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def atta(self):
        resume(frontend.status())
        settings.external_prog = 0
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def start(self):
        startup()
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def toggle(self):
        if settings.frontend_active == 0 and settings.external_prog == 0:
            resume(frontend.status())
            settings.external_prog = 0
            settings.frontend_active = 1
        else:
            detach()
            settings.external_prog = 0
            settings.frontend_active = 0
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def start_xbmc(self):
        if not settings.external_prog == 1:
            settings.external_prog = 1
            cmd = ['/usr/lib/xbmc/xbmc.bin','--standalone','--lircdev','/var/run/lirc/lircd']
            start_app(cmd)#
            return True

    @dbus.service.method('de.yavdr.frontend',in_signature='si',out_signature='b')
    def start_application(self,cmd,standalone=0):
        settings.external_prog = 1
        start_app(cmd)#
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def fullscreen(self):
        window = wnckC.windows['softhddevice_main']
        if window:
            gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
            gdkwindow.set_decorations(0)
            window.set_fullscreen(0)
            window.unmake_above()
            window.maximize()
            window.activate(int(time.strftime("%s",time.gmtime())))
        return True

    @dbus.service.method('de.yavdr.frontend',in_signature='sii',out_signature='b')
    def resize(self,s,above,decoration):
        w,h,x,y = settings.tsplit(s,('x','+'))
        print(x,y,w,h)
        window = wnckC.windows['softhddevice_main']
        if window:
            gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
            wnckC.resize(window,int(x),int(y),int(w),int(h),above,decoration)
            return True
        else:
            return False

    @dbus.service.method('de.yavdr.frontend',in_signature='isii',out_signature='b')
    def resizexid(self,xid,s,above,decoration):
        w,h,x,y = settings.tsplit(s,('x','+'))
        print(x,y,w,h)
        if window:
            gdkwindow = gtk.gdk.window_foreign_new(xid)
            wnckC.resize(window,int(x),int(y),int(w),int(h),above,decoration)
            return True
        else:
            return False

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def shutdown(self):
        remote.enable()
        remote.sendkey("POWER")
        if settings.frontend_active == 0:
            remote.disable()
        settings.timer = gobject.timeout_add(15000,soft_detach)
        return True

    @dbus.service.method('de.yavdr.frontend',out_signature='b')
    def check_shutdown(self):
        send_shutdown(user=True)
        return True

    @dbus.service.method('de.yavdr.frontend',in_signature='s',out_signature='b')
    def setBackground(self,path):
        if os.path.isfile(path):
            subprocess.call(["/usr/bin/feh","--bg-fill",path], env=settings.env)
            syslog.syslog("setting Background to %s"%(path))
            return True
        else:
            return False

def handler(sock, *args):
    '''callback function for activity on eventlircd socket'''
    try:
        buf = sock.recv(1024)
        if not buf:
            sock.close()
            try_connection()
            return True
    except:
        sock.close()
        try_connection()
        return True
    lines = string.split(buf, "\n")
    for line in lines[:-1]:
      if settings.external_prog == 1: pass
      else:
        try: gobject.source_remove(settings.timer)
        except: pass
        try:  code,count,cmd,device = string.split(line, " ")[:4]
        except: return True
        if cmd == settings.conf['key_detach']:
            if frontend.status() == "NOT_SUSPENDED":
                detach()
                settings.frontend_active = 0
            else:
                resume(frontend.status())
        elif cmd == settings.conf['key_xbmc'] and settings.external_prog == 0:
                settings.external_prog = 1
                #gobject.timeout_add(50, start_xbmc)
                cmd = ['/usr/lib/xbmc/xbmc.bin','--standalone','--lircdev','/var/run/lirc/lircd']
                gobject.timeout_add(50, start_app,cmd)
                return True

        elif cmd == settings.conf['key_power']:
            if frontend.status() == "NOT_SUSPENDED":
                settings.timer = gobject.timeout_add(15000,soft_detach)
                settings.frontend_active = 0
            else:
                send_shutdown()
        else:
            if settings.frontend_active == 0 and settings.external_prog == 0:
                resume(frontend.status())
                settings.frontend_active = 1
            else:
                pass
    return True

def start_app(cmd,detachf=True):
    if settings.frontend_active == 1 and detachf == True:
        detach()
        wnckC.windows['softhddevice_main'] = None
        settings.reattach = 1
    else:
        settings.reattach = 0
    print(settings.conf['user'])
    proc = subprocess.Popen(cmd) # Spawn process
    gobject.child_watch_add(proc.pid,on_exit,proc) # Add callback on exit

def on_exit(pid, condition,data):
        print "called function with pid=%s, condition=%s, data=%s"%(pid, condition,data)
        if condition == 0:
            print "normal exit"
            gobject.timeout_add(500,reset_external_prog)
        elif condition < 16384:
            print "abnormal exit: %s"%(condition)
            gobject.timeout_add(500,reset_external_prog)
        elif condition == 16384:
            print "shutdown"
            send_shutdown(user=True)
        elif condition == 16896:
            print "restart"
        return False

def reset_external_prog():
    if settings.reattach == 1:
        print "resume"
        resume(frontend.status())
        settings.frontend_active = 1
    else:
        settings.frontend_active = 0
    settings.external_prog = 0
    return False

def startup():

    # check if vdr was started for a timer or an acpi_wakeup event, if not attach frontend
    if settings.manualstart == True and settings.acpi_wakeup != True and settings.conf['start_always_detached'] == '0':
        resume(frontend.status())
    else:
        # set background visible when frontend is detached
        subprocess.call(["/usr/bin/feh","--bg-fill",settings.conf['logo_detached']], env=settings.env)
        # change to graphtft default view
        graphtft_switch()
        if settings.manualstart == False:
            settings.timer = gobject.timeout_add(300000, send_shutdown)
        elif settings.acpi_wakeup == True:
            if setup.vdrsetupget('MinUserInactivity')[0] != 0:
                interval, default, answer = setup.vdrsetupget("MinEventTimeout")
                interval_ms = interval  * 60000 # * 60s * 1000ms
                settings.timer = gobject.timeout_add(interval_ms, setUserInactive)
        else:
            interval, default, answer = setup.vdrsetupget("MinEventTimeout")
            interval_ms = interval  * 60000 # * 60s * 1000ms
            settings.timer = gobject.timeout_add(interval_ms, setUserInactive)
        remote.disable()

class wnckController():
    def __init__(self):
        self.windows = {
        'softhddevice_main':None,
        'softhddevice_pip':None,
        'xbmc':None
        }
        self.windownames = ['softhddevice','Geany','XBMC Media Center']
        self.screen = wnck.screen_get_default()
        self.screen.connect("window-opened", self.on_window_opened)
        self.screen.connect('window-closed', self.on_window_closed)

        self.screen_height = self.screen.get_height()
        self.screen_width = self.screen.get_width()

    def on_window_opened(self,screen,window):
        gtk.main_iteration()
        wname = window.get_name()
        window.connect('name-changed', self.window_name_changed)
        self.window_name_changed(window)


    def window_name_changed(self, window):
        wname = window.get_name()
        if wname in self.windownames:
            if wname == 'softhddevice':
                if self.windows['softhddevice_main'] == None:
                    print("assigning new main window")
                    self.windows['softhddevice_main'] = window
                    self.maximize_and_undecorate(window)
                    #window.connect('geometry-changed', self.on_window_geochanged)
                elif self.windows['softhddevice_pip'] == None and self.windows['softhddevice_main'].get_xid() != window.get_xid():
                    print("softhddevice_pip")
                    self.windows['softhddevice_pip'] = window
                    self.resize(window,1200,795,720,405,1,0)
                elif window.get_xid() == self.windows['softhddevice_main'].get_xid():
                    print("main window already defined")
                else:
                    print("too many softhddevice windows!")
            elif wname == 'XBMC Media Center':
                print("Detected XBMC Media Center")
                gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
                gdkwindow.set_icon_list([gtk.gdk.pixbuf_new_from_file('/usr/share/icons/hicolor/48x48/apps/xbmc.png')])
                if not window.is_fullscreen():
                    print "no fullscreen - maximizing and undecorating"
                    window.set_fullscreen(0)
                    window.maximize()
                    #window.make_below()
                    window.unmake_above()

    def maximize_and_undecorate(self,window):
        print("Window recognized: %s"%window.get_name())
        print("Window is fullscreen: %s"%window.is_fullscreen())
        print("Window is maximized: %s"%window.is_maximized())
        gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
        gdkwindow.set_decorations(0)
        if window.is_fullscreen():
            print("set to maximized view")
            window.set_fullscreen(0)
            window.maximize()
        if not window.is_maximized():
            window.maximize()
        window.activate(int(time.strftime("%s",time.gmtime())))

        gdkwindow.set_icon_list([gtk.gdk.pixbuf_new_from_file('/usr/share/icons/xineliboutput-sxfe.svg')])

    def resize(self,window,x=0,y=0,w=1280,h=720,above=0,d=0):
        print("run resize")
        if window != None:
            if window.is_fullscreen():
                window.set_fullscreen(0)
            if window.is_maximized():
                window.unmaximize()
            if above == 1:
                window.make_above()
            else:
                window.unmake_above()
            window.set_geometry(0,255,x,y,w,h)
            gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
            gdkwindow.set_decorations(d)
        adeskbar.hide()

    def on_window_geochanged(self,window):
        print("Window Geometry changed")
        print(window.get_name())
        gdkwindow = gtk.gdk.window_foreign_new(window.get_xid())
        if window.is_fullscreen():
            print("window is fullscreen")
            window.set_fullscreen(0)
            window.maximize()
            gdkwindow.set_decorations(0)
        elif window.is_maximized():
            print("window maximized")
            gdkwindow.set_decorations(0)
            #window.set_fullscreen(1)
        elif not window.is_maximized():
            print("window not maximized")
            #gdkwindow.set_decorations(1)

    def on_window_closed(self,screen,window):
        print("Closed Window %s:"%(window.get_name()))
        if window in self.windows.itervalues():
            WindowKey = [key for key, value in self.windows.iteritems() if value == window][0]
            print WindowKey
            self.windows[WindowKey] = None

class lircConnection():
    def __init__(self):
        self.socket_path = "/var/run/lirc/lircd"

    def connect_eventlircd(self):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(self.socket_path)
        gobject.io_add_watch(sock, gobject.IO_IN, handler)

    def try_connection(self):
        try:
            self.connect_eventlircd()
            return False
        except:
            gobject.timeout_add(1000, self.try_connection)
            syslog.syslog("Error: vdr-frontend could not connect to eventlircd socket")
            return True

def connect_eventlircd():
    socket_path = "/var/run/lirc/lircd"
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.connect(socket_path)
    gobject.io_add_watch(sock, gobject.IO_IN, handler)

def try_connection():
    try:
        connect_eventlircd()
        return False
    except:
        gobject.timeout_add(1000, try_connection)
        syslog.syslog("Error: vdr-frontend could not connect to eventlircd socket")
        return True


if __name__ == '__main__':
    syslog.openlog(ident="vdr-frontend",logoption=syslog.LOG_PID)
    # Initialize dbus-control classes
    frontend = dbusSofthddeviceFrontend()
    remote = dbusRemote()
    shutdown = dbusShutdown()
    setup = dbusSetup()
    adeskbar = adeskbarDBus()

    # initzialize settings (and environment variables)
    settings = Settings()
    wnckC = wnckController()
    pip = dbusPIP(wnckC)
    # wait until pulseaudio module pulseaudio-native-tcp has been loaded
    settings.check_pulseaudio()
    # Connect to lirc socket
    try_connection()
    startup()

    dbusservice = dbusService()
    while gtk.events_pending():
        gtk.main_iteration()

    gtk.main()
